{"version":3,"sources":["../../src/commands/do_init.js"],"names":["doInit","host","path","join","rootPath","exists","writeFile","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;SAE8BA,M;;;;;8BAAf,WAAsBC,IAAtB,EAA4B;AACzC,UAAMC,OAAO,cAAKC,IAAL,CAAUF,KAAKG,QAAf,mCAAb;;AACA,QAAI,QAAQ,mBAAGC,MAAH,CAAUH,IAAV,CAAR,CAAJ,EAA8B;AAC5B,YAAM,mBAAGI,SAAH,CAAaJ,IAAb,EAAoB;;;;;;;;GAApB,CAAN;AASAK,cAAQC,GAAR,CAAa,qBAAoBN,IAAK,EAAtC;AACD,KAXD,MAWO;AACLK,cAAQC,GAAR,CAAa,yBAAwBN,IAAK,EAA1C;AACD;AACF,G","file":"do_init.js","sourcesContent":["import FS from 'async-file';\nimport Path from 'path';\nimport { CONFIG_FILENAME } from '../migrations_host';\n\nexport default async function doInit(host) {\n  const path = Path.join(host.rootPath, CONFIG_FILENAME);\n  if (!(await FS.exists(path))) {\n    await FS.writeFile(path, `export default {\n  migrationsTableName: \"migrations\",\n  migrationsPath: \"./migrations/\",\n  getConnection: async ()=>{\n    const pg = /* do stuff to get a single pg client to your database */\n    return pg;\n  }\n}\n  `);\n    console.log(`Wrote skeleton to ${path}`);\n  } else {\n    console.log(`Already configured at ${path}`);\n  }\n}\n"]}