{"version":3,"sources":["../src/cli.js"],"names":["minimist","require","MigrationsHost","doCreate","doInit","doRun","doStatus","args","process","argv","slice","host","config","cwd","command","_","shift","localMigrationsMap","has","get","console","log","exit","exception","trace","error","stack","message"],"mappings":"AAAA;;;;;;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,sBAAD,CAA9B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,mBAAD,CAArB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AAEA,MAAMM,IAAI,GAAGP,QAAQ,CAACQ,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAD,CAArB;;AAEA,kBAAC,aAAU;AACT,MAAI;AACF,UAAMC,IAAI,GAAG,IAAIT,cAAJ,CAAmBK,IAAI,CAACK,MAAL,IAAeJ,OAAO,CAACK,GAAR,EAAlC,CAAb;;AACA,UAAMC,OAAO,GAAGP,IAAI,CAACQ,CAAL,CAAOC,KAAP,EAAhB;;AAEA,QAAIF,OAAO,IAAI,MAAf,EAAuB;AACrB,YAAMV,MAAM,CAACO,IAAD,CAAZ;AACD,KAFD,MAEO,IAAIG,OAAO,IAAI,QAAf,EAAyB;AAC9B,YAAMX,QAAQ,CAACQ,IAAD,EAAOJ,IAAP,CAAd;AACD,KAFM,MAEA,IAAIO,OAAO,IAAI,QAAf,EAAyB;AAC9B,YAAMR,QAAQ,CAACK,IAAD,EAAOJ,IAAP,CAAd;AACD,KAFM,MAEA,IAAIO,OAAO,IAAI,IAAf,EAAqB;AAC1B,YAAMT,KAAK,CAACM,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmBJ,IAAnB,CAAX;AACD,KAFM,MAEA,IAAIO,OAAO,IAAI,MAAf,EAAuB;AAC5B,YAAMT,KAAK,CAACM,IAAD,EAAO,IAAP,EAAa,MAAb,EAAqBJ,IAArB,CAAX;AACD,KAFM,MAEA;AACL,YAAMU,kBAAkB,SAASN,IAAI,CAACM,kBAAL,EAAjC;;AACA,UAAIA,kBAAkB,CAACC,GAAnB,CAAuBJ,OAAvB,CAAJ,EAAqC;AACnC,cAAMT,KAAK,CAACM,IAAD,EAAOM,kBAAkB,CAACE,GAAnB,CAAuBL,OAAvB,CAAP,EAAwCP,IAAI,CAACQ,CAAL,CAAOC,KAAP,EAAxC,EAAwDT,IAAxD,CAAX;AACD,OAFD,MAEO;AACLa,QAAAA,OAAO,CAACC,GAAR,CAAa,gCAA+BP,OAAQ,GAApD;AACAN,QAAAA,OAAO,CAACc,IAAR,CAAa,CAAb;AACD;AACF;;AACDd,IAAAA,OAAO,CAACc,IAAR,CAAa,CAAb;AACD,GAxBD,CAwBE,OAAMC,SAAN,EAAiB;AACjB,QAAIhB,IAAI,CAACiB,KAAT,EAAgB;AACdJ,MAAAA,OAAO,CAACK,KAAR,CAAcF,SAAS,CAACG,KAAxB;AACD,KAFD,MAEO;AACLN,MAAAA,OAAO,CAACK,KAAR,CAAe,+CAAf;AACD;;AACDL,IAAAA,OAAO,CAACK,KAAR,CAAcF,SAAS,CAACI,OAAxB;AACAnB,IAAAA,OAAO,CAACc,IAAR,CAAa,CAAb;AACD;AACF,CAlCD","sourcesContent":["#!/usr/bin/env node\nconst minimist = require('minimist');\nconst MigrationsHost = require('./migrations_host.js');\nconst doCreate = require('./commands/do_create');\nconst doInit = require('./commands/do_init');\nconst doRun = require('./commands/do_run');\nconst doStatus = require('./commands/do_status');\n\nconst args = minimist(process.argv.slice(2));\n\n(async ()=>{\n  try {\n    const host = new MigrationsHost(args.config || process.cwd());\n    const command = args._.shift();\n\n    if (command == 'init') {\n      await doInit(host);\n    } else if (command == 'create') {\n      await doCreate(host, args);\n    } else if (command == 'status') {\n      await doStatus(host, args);\n    } else if (command == 'up') {\n      await doRun(host, null, 'up', args);\n    } else if (command == 'down') {\n      await doRun(host, null, 'down', args);\n    } else {\n      const localMigrationsMap = await host.localMigrationsMap();\n      if (localMigrationsMap.has(command)) {\n        await doRun(host, localMigrationsMap.get(command), args._.shift(), args);\n      } else {\n        console.log(`Can't find migration by key '${command}'`);\n        process.exit(1);\n      }\n    }\n    process.exit(0);\n  } catch(exception) {\n    if (args.trace) {\n      console.error(exception.stack);\n    } else {\n      console.error(`Run again with --trace to see the stacktrace.`);\n    }\n    console.error(exception.message);\n    process.exit(1);\n  }\n})();"],"file":"cli.js"}