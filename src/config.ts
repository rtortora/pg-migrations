import type { MigrationType } from './lib/local_migrations_map';

export type Config = {
  /**
   * Path to the folder that will contain migrations, relative to the project root.
   * Default value: "./migrations"
   */
  migrationsRelPath?: string,

  /**
   * Table name that pg-migrations can create and own in order to track the status of migrations.
   * Default value: "migrations"
   */
  migrationsTableName?: string,

  /**
   * Settings for creating new migrations
   */
  creation?: {
    /**
     * If true, newly created migrations will automatically be put into a YEAR-MONTH
     * subfolder to keep migrations tidy. Whether or not this setting is true, the
     * pg-migrations tidy command can do this at any time in the future.
     * Default value: false
     */
    autoTidy?: boolean,

    /**
     * The default migration type when creating a new migration. Type can be overridden
     * at time of migration creation.
     * Default value: "sql"
     */
    defaultMigrationType?: MigrationType,

    /**
     * File name seperator to use.
     * Default value: '_'
     */
    fileNameSeperator?: '_' | '-',

    /**
     * Migration keys are generated by time indexes. When seconds is included, it makes all the file names
     * longer, but makes it less likely to run into duplicate keys (which would be an error).
     * Default value: false
     */
    includeSecondsInKeys?: boolean,

    /**
     * Newly created migrations have processed templates which require applying a line ending. The default
     * should be whatever is appropriate for your current operating system.
     * Default value: os.EOL
     */
    lineEndings?: string,
  },

  /**
   * PG connection settings
   */
  pg: PgConfig,
};

export type PgConfig = {
  database: string,

  user?: string,

  /**
   * Default value: "localhost"
   */
  host?: string,

  /**
   * Password can also be provided with the PGPASSWORD environment variable.
   */
  password?: string,

  /**
   * Default value: 5432
   */
  port?: number,
};
